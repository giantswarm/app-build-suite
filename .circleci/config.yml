version: 2.1

orbs:
  architect: giantswarm/architect@4.8.0
  codecov: codecov/codecov@3.2.0

workflows:
  test:
    jobs:
      - run-tests:
          name: run-tests
          filters:
            # Needed to trigger job also on git tag.
            tags:
              only: /^v.*/

      - architect/push-to-docker:
          name: push-app-build-suite-to-quay
          requires:
            - run-tests
          context: architect
          image: "quay.io/giantswarm/app-build-suite"
          username_envar: "QUAY_USERNAME"
          password_envar: "QUAY_PASSWORD"
          filters:
            # Needed to trigger job also on git tag.
            tags:
              only: /^v.*/

      - augment-circleci-dockerfile:
          name: augment-circleci-dockerfile
          requires:
            - push-app-build-suite-to-quay
          filters:
            # Needed to trigger job also on git tag.
            tags:
              only: /^v.*/

      - architect/push-to-docker:
          name: push-app-build-suite-circle-ci-to-quay
          requires:
            - push-app-build-suite-to-quay
            - augment-circleci-dockerfile
          context: architect
          image: "quay.io/giantswarm/app-build-suite"
          username_envar: "QUAY_USERNAME"
          password_envar: "QUAY_PASSWORD"
          dockerfile: "./circleci.Dockerfile"
          tag-suffix: "-circleci"
          filters:
            # Needed to trigger job also on git tag.
            tags:
              only: /^v.*/
      - publish-github-release:
          name: publish-github-release-for-dabs
          requires:
            - push-app-build-suite-circle-ci-to-quay
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/


jobs:
  augment-circleci-dockerfile:
    executor: "architect/architect"
    steps:
      - checkout
      - run:
          name: Generate container tag like architect orb does it
          command: |
            echo -n "quay.io/giantswarm/app-build-suite:$(architect project version)" > .docker_image_name
      - run:
          name: augment circleci.Dockerfile
          command: |
            CURRENT_TAG="$(cat .docker_image_name)"
            sed -i -e "s|FROM changeme|FROM ${CURRENT_TAG}|" circleci.Dockerfile
      - persist_to_workspace:
          root: "."
          paths:
            - "circleci.Dockerfile"

  run-tests:
    docker:
      - image: cimg/python:3.8.12
    steps:
      - checkout

      - run:
          name: Install test dependencies
          command: |
            eval $(sed -n 's|ARG|export|p' Dockerfile)

            mkdir ~/bin

            wget -qO - https://get.helm.sh/helm-v${HELM_VER}-linux-amd64.tar.gz | \
              tar -C ~/bin --strip-components 1 -xvzf - linux-amd64/helm

            wget -qO- "https://github.com/koalaman/shellcheck/releases/download/latest/shellcheck-latest.linux.x86_64.tar.xz" | \
              tar -xJv
            mv "shellcheck-latest/shellcheck" ~/bin/

            wget -qO - https://github.com/helm/chart-testing/releases/download/v${CT_VER}/chart-testing_${CT_VER}_linux_amd64.tar.gz | \
              tar -C ~/bin -xvzf - ct etc/lintconf.yaml etc/chart_schema.yaml
            sudo mv ~/bin/etc /etc/ct

            wget -qO - https://github.com/stackrox/kube-linter/releases/download/${KUBELINTER_VER}/kube-linter-linux.tar.gz | \
              tar -C ~/bin -xvzf -

            pipenv install --deploy --clear --dev
            pip install yamllint==${CT_YAMLLINT_VER} yamale==${CT_YAMALE_VER}

      - run:
          name: Lint code
          command: |
            pipenv run pre-commit run --all-files

      - run:
          name: Execute tests
          command: |
            make test-ci

      - codecov/upload:
          file: .coverage/coverage.xml

  publish-github-release:
    docker:
      - image: cibuilds/github:0.13
    steps:
      - checkout
      - run:
          name: "Publish Release on GitHub"
          command: |
            ghr -t ${ARCHITECT_GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} ${CIRCLE_TAG} ./dabs.sh
